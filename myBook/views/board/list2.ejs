<style>
  .heart0,
  .heart1 {
    cursor: pointer;
    float: right;
    color: red;
    font-size: 1.5rem;
  }
  .fcnt {
    font-size: 0.5rem;
    float: right;
    margin-top: 15px;
  }
</style>
<div class="row my-2">
  <div class="col">
    <h1 class="text-center mb-2">게시글</h1>
    <div class="text-end">
      <button class="btn btn-primary btn-sm" id="btn-write">글쓰기</button>
    </div>
    <div id="boards"></div>
    <div class="text-center my-3" id="btn-group" style="display: none">
      <button class="btn btn-primary btn-sm" id="btn-prev">이전</button>
      <span class="px-2" id="span-page">1</span>
      <button class="btn btn-primary btn-sm" id="btn-next">다음</button>
    </div>
  </div>
</div>

<!--게시글목록 템플릿 : 템플릿에서 JSON 데이터 안의 JSON 데이터는 . 으로 호출한다.  -->
<script id="temp" type="text/x-handlebars-template">
  {{#each .}}
  <div class="card my-2" style="font-size:0.8rem">
      <div class="card-body">
          <a href="/board/{{ id }}"><h5>{{ title }}</h5></a>
          <div class="ellipsis2">{{ body }}</div>
      </div>
      <div class="card-footer">
          <span>Posted on {{ date }} by {{ email }}</span>
          <span class="heart{{ucnt}}" id="{{id}}">
            <span>{{heart ucnt}}</span>
            <span class="fcnt">{{fcnt}}</span>
          </span>
      </div>
  </div>
  {{/each}}
</script>

<script>
  Handlebars.registerHelper("heart", function (ucnt) {
    if (ucnt == 0) return "♡";
    else return "♥";
  });
</script>

<script type="module">
  import { app } from "/javascripts/firebase.js";
  import { getFirestore, collection, addDoc } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-firestore.js";

  import { query, where, getDocs, orderBy, doc, deleteDoc } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-firestore.js";

  const db = getFirestore(app);
  let page = 1;
  // 호이스팅 이슈는 변수에만 적용되는게 아니야
  //함수도 호이스팅이 일어난다
  getList();
  async function getList() {
    //arrow function 호이스팅이 일어나지 않으니까
    const q = query(collection(db, "board"), orderBy("date", "desc"));
    const snapshot = await getDocs(q);
    let rows = [];
    snapshot.forEach(async (row) => {
      // 글 목록만 가져오지 말고 좋아요에 대한 정보도 같이 머지(merge)한다
      const q1 = query(collection(db, "favorite"), where("pid", "==", row.id));
      const snap1 = await getDocs(q1);
      const q2 = query(collection(db, "favorite"), where("pid", "==", row.id), where("email", "==", email));
      const snap2 = await getDocs(q2);
      //console.log(`${element} ${index} ${arr}`);
      //console.log(arr); //배열이 2번 출력될것이다
      console.log(row.id);
      // 여러 개의 쿼리문을 병합하는 코드 - spread 연산자(원본을 가져옴) -> 열거형 연산자 활용 - 새로운 배열객체 생성함
      // 여러 개를 머지하는 코드가 좀 어려움
      rows.push({ id: row.id, ...row.data(), fcnt: snap1.docs.length, ucnt: snap2.docs.length });
      console.log(rows); //원본에 id키를 갖는 값이 들어갔나요?
      let temp = Handlebars.compile($("#temp").html());
      $("#boards").html(temp(rows));
    }); //end forEach
  }

  //개발자 센터 > application > storage > localStorage
  const email = localStorage.getItem("email");
  $("#btn-write").on("click", () => {
    //로그인을 해야만 글쓰기 권한이 있다
    //너 로그인 했니? - 너 email값 쥐고 있어? - 어디에? localStorage
    if (email) {
      location.href = "/board/write";
    }
    //나 로그인 안했어? 하고 와
    else {
      location.href = "/login";
    }
  });

  //좋아요 추가
  $("#boards").on("click", ".heart0", async function () {
    let id = $(this).attr("id");
    if (email) {
      await addDoc(collection(db, "favorite"), { pid: id, email: email });
      alert("좋아요 추가");
      getList();
    } else {
      //이멜이 없는 경우는 로그인을 안한 경우 이거나 로그인이 풀린 경우이다.
      location.href = "/login";
    }
  });

  //좋아요 삭제
  $("#boards").on("click", ".heart1", async function () {
    let id = $(this).attr("id");
    //먼저 어떤 글에 대한 좋아요 삭제인지 조회해 오기
    const q = query(collection(db, "favorite"), where("pid", "==", id), where("email", "==", email));
    const snapshot = await getDocs(q);
    snapshot.forEach((row) => {
      deleteDoc(doc(db, "favorite", row.id));
      alert("좋아요 삭제");
      //Realtime database제품이 아니라서 삭제한 결과를 화면에 갱신하려면 새로고침해야 한다.
      getList();
    });
  });
</script>