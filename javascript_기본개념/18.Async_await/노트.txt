자바스크립트는 객체지향 언어가 아니다.
: 스레드에 대한 이슈가 있다 - 동기와 비동기로 극복
: 생성자, 메소드-(클래스 안에 정의된 전역함수를 메소드라 함) 가 아니다.

자바스크립트는 동기이다
그래서 중간에 지연상황이 발동하여도 아래로 진행이 된다.
서버측에서 받아온 정보를 담지 못했다.
왜냐면 시간차가 발생 했으니까.
시간차를 극복하는 방법은 - 비동기 처리를 해라.

**** 비동기처리 핵심 키워드 ****
1. 콜백
2. 프로토타입
3. 반환값 - 화면출력함

자바스크립트는 동기 인데, 비동기로 처리 해야하는 경우가 있다.

setTimeout함수 - 지연 - await
강제로 지연상황을 연출해 보았다.

어떤 경우가 있을까??
- 날씨정보를 서버(http프로토콜 - 네트워크 - IO - dead lock - 재시작)로부터 받아온다.
- 


콜백함수 자리함 - 두번째 인자만큼의 지연후에 실행됨

프로세스가 많아질수록 setTimeout이 중첩되어가고
또 들여쓰기도 depth가 자꾸 깊어져서 가독성이 떨어지고
유지보수가 어렵다

개선할 수 있는 방법이 있나?? Promise -> 반복되는 코드를 줄이고, 가독성도 괜찮은 편

Promise
: 성공 - resolve - 반환타입은 JSON인가? 아님 Object인가?
: 실패 - reject - 에러에 대한 핸들링은 어떻게 처리할 수 있을까?

기본 예제에서 영화 예제까지 관찰하였다.
1. fetch 함수는 반드시 html 문서가 필요하다.
2. fetch 함수의 반환타입이 Promise라는 걸 알게 되었다.
대기(pending): 이행하지도, 거부하지도 않은 초기 상태 -> 결과를 바랄 수 없다. 애매모호하다.
: 코딩을 덜 작성하였다. 무언가 빼먹었다.
이행(fulfilled): 연산이 성공적으로 완료됨  - 200번 상태 - 후처리를 진행한다.
: 영화예제에서 전처리는 뭐였지?? -> 영화제목을 입력받는 일
거부(rejected): 연산이 실패함

// 파라미터가 함수라는건 실행문을 가질 수 있다.
// {} 묶을 수 있다. - 코드가 전개되게 시작. - 첫 단추
// reject함수는 에러를 핸들링 할 수 있다. -> try...catch블록 생각 -> 이걸 안하면 고객이 403에러를 날것으로 보게된다.
// 화면처리 - 순서가 중요하다.
// 영화정보를 조건 검색하는데 화면이 먼저인가요?? 아니면 fetch 처리가 먼저 일까요??
// 자바스크립트 먼저 흘러간다. - 화면이 그려지는게 먼저이다. - 그런데 영화정보가 없는 화면이다.
// 문제제기 - 비동기로 처리해야 되는거구나!
new Promise((resolve, reject) => {})